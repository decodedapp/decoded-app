import {
  ContentType,
  ContentStatus,
  AIGenMetadataResponse,
  LinkPreviewMetadataResponse,
} from '@/api/generated';

/**
 * 콘텐츠 상태 타입 - 새로운 API enum과 일치
 */
export type ContentStatusType = ContentStatus;

/**
 * 통합된 콘텐츠 타입 - API 응답을 프론트엔드에서 사용하기 위한 통합 인터페이스
 */
export interface UnifiedContent {
  id: string;
  type: ContentType;
  channel_id: string;
  provider_id: string;
  created_at?: string | null;
  updated_at?: string | null;
  status?: ContentStatusType; // 새로운 API enum 사용

  // 공통 필드
  title?: string;
  description?: string | null;
  thumbnail_url?: string | null;

  // 타입별 특화 필드
  imageContent?: {
    url: string; // img_url에서 url로 변경
    likes?: number;
    tagged_items?: Array<any>;
  };

  videoContent?: {
    video_url: string;
    details?: {
      duration_seconds: number;
      width: number;
      height: number;
      format?: string | null;
    } | null;
    chapters?: Array<any>;
    transcript?: string | null;
  };

  linkContent?: {
    url: string;
    category?: string | null; // nullable로 변경
    link_preview_metadata?: LinkPreviewMetadataResponse | null;
    ai_gen_metadata?: AIGenMetadataResponse | null;
    metadata?: {
      game?: string;
      topics?: string;
      platforms?: string;
      content_type?: string;
      release_year?: string;
    } | null;
  };
}

/**
 * 프론트엔드에서 사용하는 콘텐츠 아이템 타입
 */
export interface ContentItem {
  id: string | number;
  type: ContentType | 'image' | 'video' | 'text';
  title: string;
  description?: string;
  imageUrl?: string;
  thumbnailUrl?: string; // thumbnailUrl 필드 추가
  category?: string;
  author?: string;
  date?: string;
  likes?: number;
  views?: number;
  status?: ContentStatusType; // 새로운 API enum 사용

  // 레이아웃 관련
  height?: string;
  width?: string;

  // 타입별 추가 정보
  videoUrl?: string;
  linkUrl?: string;
  duration?: number;

  // AI generated data
  aiSummary?: string;
  aiQaList?: Array<{ question: string; answer: string }>;

  // 링크 프리뷰 메타데이터
  linkPreview?: {
    title?: string;
    description?: string;
    imageUrl?: string;
    siteName?: string;
  };

  // 추가 메타데이터
  metadata?: {
    game?: string;
    topics?: string;
    platforms?: string;
    contentType?: string;
    releaseYear?: string;
  };
}

/**
 * 콘텐츠 타입 가드 함수들
 */
export const isImageContent = (
  content: UnifiedContent,
): content is UnifiedContent & { imageContent: NonNullable<UnifiedContent['imageContent']> } => {
  return content.type === ContentType.IMAGE && !!content.imageContent;
};

export const isVideoContent = (
  content: UnifiedContent,
): content is UnifiedContent & { videoContent: NonNullable<UnifiedContent['videoContent']> } => {
  return content.type === ContentType.VIDEO && !!content.videoContent;
};

export const isLinkContent = (
  content: UnifiedContent,
): content is UnifiedContent & { linkContent: NonNullable<UnifiedContent['linkContent']> } => {
  return content.type === ContentType.LINK && !!content.linkContent;
};

/**
 * 새로운 API 구조에 맞는 상태 매핑 함수
 */
export const mapContentStatus = (
  dbStatus?: string,
): ContentStatusType => {
  // 새로운 API의 ContentStatus enum 사용
  if (!dbStatus) {
    return ContentStatus.PENDING;
  }

  // DB 상태를 새로운 enum으로 매핑
  switch (dbStatus.toLowerCase()) {
    case 'active':
      return ContentStatus.ACTIVE;
    case 'hidden':
      return ContentStatus.HIDDEN;
    case 'pending':
    default:
      return ContentStatus.PENDING;
  }
};

/**
 * 새로운 API 구조에 맞는 콘텐츠 통합 함수
 */
export const unifyContent = (content: Record<string, any>): UnifiedContent => {
  console.log('unifyContent - input content:', content);
  console.log('unifyContent - status field:', content.status);

  // 필드 존재 여부로 타입 구분
  let contentType = ContentType.IMAGE; // 기본값

  // 링크 콘텐츠 확인 (link_preview_metadata나 ai_gen_metadata가 있으면 링크)
  if (content.link_preview_metadata || content.ai_gen_metadata || content.category) {
    contentType = ContentType.LINK;
  } else if (content.video_url && content.type === ContentType.VIDEO) {
    contentType = ContentType.VIDEO;
  } else if ((content.url || content.img_url) && content.type === ContentType.IMAGE) {
    contentType = ContentType.IMAGE;
  }

  console.log('unifyContent - detected contentType:', contentType);

  // status 매핑
  const mappedStatus = mapContentStatus(content.status);
  console.log('unifyContent - status mapping:', {
    originalStatus: content.status,
    mappedStatus: mappedStatus,
  });

  const baseContent: UnifiedContent = {
    id: content.id,
    type: contentType,
    channel_id: content.channel_id,
    provider_id: content.provider_id,
    created_at: content.created_at,
    updated_at: content.updated_at,
    title: content.title,
    description: content.description,
    thumbnail_url: content.thumbnail_url,
    status: mappedStatus,
  };

  switch (contentType) {
    case ContentType.IMAGE:
      return {
        ...baseContent,
        imageContent: {
          url: content.url || content.img_url, // 새로운 API는 url 필드 사용
          likes: content.likes,
          tagged_items: content.tagged_items,
        },
      };

    case ContentType.VIDEO:
      return {
        ...baseContent,
        videoContent: {
          video_url: content.video_url,
          details: content.details,
          chapters: content.chapters,
          transcript: content.transcript,
        },
      };

    case ContentType.LINK:
      return {
        ...baseContent,
        linkContent: {
          url: content.url,
          category: content.category,
          link_preview_metadata: content.link_preview_metadata,
          ai_gen_metadata: content.ai_gen_metadata,
          metadata: content.metadata,
        },
      };

    default:
      console.warn('unifyContent - unknown content type:', contentType, content);
      return baseContent;
  }
};

/**
 * UnifiedContent를 ContentItem으로 변환
 */
export const convertToContentItem = (content: UnifiedContent): ContentItem => {
  console.log('[convertToContentItem] Processing content:', {
    id: content.id,
    type: content.type,
    hasImageContent: !!content.imageContent,
    hasVideoContent: !!content.videoContent,
    hasLinkContent: !!content.linkContent,
  });

  const baseItem: ContentItem = {
    id: content.id,
    type: content.type,
    title: content.title || 'Untitled',
    description: content.description || undefined,
    status: content.status,
  };

  if (isImageContent(content)) {
    console.log('[convertToContentItem] Processing as image content');
    return {
      ...baseItem,
      imageUrl: content.imageContent.url, // url 필드 사용
      likes: content.imageContent.likes,
      thumbnailUrl: content.thumbnail_url || undefined,
    };
  }

  if (isVideoContent(content)) {
    console.log('[convertToContentItem] Processing as video content');
    return {
      ...baseItem,
      videoUrl: content.videoContent.video_url,
      thumbnailUrl: content.thumbnail_url || undefined,
      duration: content.videoContent.details?.duration_seconds,
    };
  }

  if (isLinkContent(content)) {
    console.log('[convertToContentItem] Processing as link content:', {
      id: content.id,
      url: content.linkContent.url,
      hasLinkPreview: !!content.linkContent.link_preview_metadata,
      hasAiGenMetadata: !!content.linkContent.ai_gen_metadata,
      linkPreviewImageUrl: content.linkContent.link_preview_metadata?.img_url,
      linkPreviewTitle: content.linkContent.link_preview_metadata?.title,
      linkPreviewSiteName: content.linkContent.link_preview_metadata?.site_name,
      aiSummary: content.linkContent.ai_gen_metadata?.summary,
      aiQaListCount: content.linkContent.ai_gen_metadata?.qa_list?.length || 0,
    });

    // 링크 URL에서 도메인 추출하여 기본 사이트명 생성
    const getDefaultSiteName = (url: string) => {
      try {
        const domain = new URL(url).hostname.replace('www.', '');
        return domain.split('.')[0]; // 첫 번째 부분만 사용 (예: naver, youtube)
      } catch {
        return 'link';
      }
    };

    // 링크 프리뷰 메타데이터 처리
    const linkPreview = content.linkContent.link_preview_metadata
      ? {
          title: content.linkContent.link_preview_metadata.title || '링크 제목 없음',
          description: content.linkContent.link_preview_metadata.description || '설명이 없습니다.',
          imageUrl: content.linkContent.link_preview_metadata.img_url || undefined,
          siteName:
            content.linkContent.link_preview_metadata.site_name ||
            getDefaultSiteName(content.linkContent.url),
        }
      : {
          title: '링크 제목 없음',
          description: '설명이 없습니다.',
          imageUrl: undefined,
          siteName: getDefaultSiteName(content.linkContent.url),
        };

    const result = {
      ...baseItem,
      linkUrl: content.linkContent.url,
      category: content.linkContent.category || undefined,
      // 링크 콘텐츠는 imageUrl을 설정하지 않음 (linkPreview.imageUrl 사용)
      thumbnailUrl: content.thumbnail_url || undefined,
      // AI 생성 메타데이터 추가
      aiSummary: content.linkContent.ai_gen_metadata?.summary,
      aiQaList: content.linkContent.ai_gen_metadata?.qa_list?.map((qa) => ({
        question: qa.question,
        answer: qa.answer,
      })),
      // 링크 프리뷰 메타데이터 추가 (개선된 처리)
      linkPreview,
      // 추가 메타데이터
      metadata: content.linkContent.metadata
        ? {
            game: content.linkContent.metadata.game,
            topics: content.linkContent.metadata.topics,
            platforms: content.linkContent.metadata.platforms,
            contentType: content.linkContent.metadata.content_type,
            releaseYear: content.linkContent.metadata.release_year,
          }
        : undefined,
    };

    console.log('[convertToContentItem] Link content result:', {
      type: result.type,
      linkUrl: result.linkUrl,
      aiSummary: result.aiSummary,
      aiQaListCount: result.aiQaList?.length || 0,
      linkPreviewTitle: result.linkPreview?.title,
      linkPreviewSiteName: result.linkPreview?.siteName,
    });

    return result;
  }

  console.log('[convertToContentItem] Processing as unknown content type');
  return baseItem;
};
